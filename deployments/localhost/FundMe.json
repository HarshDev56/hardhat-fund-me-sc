{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x92f824d5df50fc84c7c09d8269446f1a6dea32bc7eb063d3fb76325fd6b31486",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1001896",
        "logsBloom": "0x
        "blockHash": "0x5b8476609662d44911516b987bf1d968bc0f9e5dd83d9a60b91f8500d7870036",
        "transactionHash": "0x92f824d5df50fc84c7c09d8269446f1a6dea32bc7eb063d3fb76325fd6b31486",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1001896",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "1f6ce917f722e42eaf14b73a8655a276",
    "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Harsh Fichadiya\",\"details\":\"this implements pricefeed as out library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"this contract is a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"/*\\n1. Get Funds from users.\\n2. withdraw funds.\\n3. set a minimum funding value in USD.\\n*/\\n\\n//pragma\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n//imports\\nimport \\\"./PriceConvertor.sol\\\";\\n\\n//Error code\\nerror FundMe__NotOwner();\\n\\n// interfaces, libraries , contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Harsh Fichadiya\\n * @notice this contract is a sample funding contract\\n * @dev this implements pricefeed as out library\\n */\\ncontract FundMe {\\n    // type declaration\\n    using PriceConvertor for uint256;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        _;\\n    }\\n\\n    /* function order \\n    constructor\\n\\n    receive function (if exists)\\n\\n    fallback function (if exists)\\n\\n    external\\n\\n    public\\n\\n    internal\\n\\n    private\\n\\n    view/pure\\n    */\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    address[] private s_funders;\\n\\n    // state variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    function fund() public payable {\\n        // want to able to set a minimum fund amount in USD\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        ); // 1e18 == 1*10**18 == 1000000000000000000\\n        // 18 decimal\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset the funders\\n        s_funders = new address[](0);\\n\\n        // // withdraw fund has three ways\\n        // // 1. transfer\\n        // // msg.sender = address\\n        // // payable(msg.sender) = payable address\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // 2. send\\n        // bool transferSucess =  payable(msg.sender).send(address(this).balance);\\n        // require(transferSucess,\\\"Send Failed\\\");\\n\\n        // 3. call\\n        (bool callSucess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSucess, \\\"Send Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mapping can't be in memory\\n        for (\\n            uint funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n            s_funders = new address[](0);\\n            (bool sucess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n            require(sucess);\\n        }\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n}\\n\",\"keccak256\":\"0x91582b5da24df213354b2af0a131514529303469cd9cb65dd159ad8dc698a996\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor {\\n     function getPrice(AggregatorV3Interface priceFeed) internal  view returns(uint256) {\\n        // we need ABI and address (0x694AA1769357215DE4FAC081bf1f309aDC325306)\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // price =  ETH price in terms of USD\\n        // 3000.00000000 (8 decimals)\\n\\n        return uint256(price * 1e10); // 1e10 = 1**10 = 10000000000\\n    }\\n\\n    function getVersion() internal view returns(uint256) {\\n          AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // 3000_000000000000000000 = ETH / USD price\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount)/1e18;\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x407fb2f3bc5e7f5409a74d3bd5f2c8a7d4411731ff96cd1b61472bb1a1413803\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200123f3803806200123f83398181016040528101906200003791906200011c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b600060208284031215620001355762000134620000b2565b5b6000620001458482850162000105565b91505092915050565b6080516110c06200017f6000396000818161033d01528181610596015281816105e501526107d001526110c06000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a9a565b6102f2565b6040516100cc9190610ae0565b60405180910390f35b3480156100e157600080fd5b506100ea61033b565b005b3480156100f857600080fd5b50610101610585565b60405161010e9190610ae0565b60405180910390f35b34801561012357600080fd5b5061012c610592565b6040516101399190610b0a565b60405180910390f35b34801561014e57600080fd5b506101576105ba565b6040516101649190610b84565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105e3565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bcb565b61087b565b6040516101c29190610b0a565b60405180910390f35b6802b5e3af16b188000061020860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c390919063ffffffff16565b1015610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610c55565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610cc1565b60405180910390fd5b60005b600180549050811015610475576000600182815481106103ef576103ee610ce1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046d90610d3f565b9150506103cc565b50600067ffffffffffffffff81111561049157610490610d87565b5b6040519080825280602002602001820160405280156104bf5781602001602082028036833780820191505090505b50600190805190602001906104d5929190610990565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104fc90610de7565b60006040518083038185875af1925050503d8060008114610539576040519150601f19603f3d011682016040523d82523d6000602084013e61053e565b606091505b5050905080610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610e48565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890610cc1565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ab575b5050505050905060005b815181101561087757600082828151811061071d5761071c610ce1565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff81111561078757610786610d87565b5b6040519080825280602002602001820160405280156107b55781602001602082028036833780820191505090505b50600190805190602001906107cb929190610990565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081290610de7565b60006040518083038185875af1925050503d806000811461084f576040519150601f19603f3d011682016040523d82523d6000602084013e610854565b606091505b505090508061086257600080fd5b5050808061086f90610d3f565b9150506106ff565b5050565b60006001828154811061089157610890610ce1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108cf836108ff565b90506000670de0b6b3a764000085836108e89190610e68565b6108f29190610ed9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190610f97565b5050509150506402540be400816109889190611012565b915050919050565b828054828255906000526020600020908101928215610a09579160200282015b82811115610a085782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b0565b5b509050610a169190610a1a565b5090565b5b80821115610a33576000816000905550600101610a1b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6782610a3c565b9050919050565b610a7781610a5c565b8114610a8257600080fd5b50565b600081359050610a9481610a6e565b92915050565b600060208284031215610ab057610aaf610a37565b5b6000610abe84828501610a85565b91505092915050565b6000819050919050565b610ada81610ac7565b82525050565b6000602082019050610af56000830184610ad1565b92915050565b610b0481610a5c565b82525050565b6000602082019050610b1f6000830184610afb565b92915050565b6000819050919050565b6000610b4a610b45610b4084610a3c565b610b25565b610a3c565b9050919050565b6000610b5c82610b2f565b9050919050565b6000610b6e82610b51565b9050919050565b610b7e81610b63565b82525050565b6000602082019050610b996000830184610b75565b92915050565b610ba881610ac7565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b600060208284031215610be157610be0610a37565b5b6000610bef84828501610bb6565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c3f601283610bf8565b9150610c4a82610c09565b602082019050919050565b60006020820190508181036000830152610c6e81610c32565b9050919050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b6000610cab601483610bf8565b9150610cb682610c75565b602082019050919050565b60006020820190508181036000830152610cda81610c9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4a82610ac7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d7c57610d7b610d10565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd1600083610db6565b9150610ddc82610dc1565b600082019050919050565b6000610df282610dc4565b9150819050919050565b7f53656e64204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e32600b83610bf8565b9150610e3d82610dfc565b602082019050919050565b60006020820190508181036000830152610e6181610e25565b9050919050565b6000610e7382610ac7565b9150610e7e83610ac7565b9250828202610e8c81610ac7565b91508282048414831517610ea357610ea2610d10565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ee482610ac7565b9150610eef83610ac7565b925082610eff57610efe610eaa565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2981610f0a565b8114610f3457600080fd5b50565b600081519050610f4681610f20565b92915050565b6000819050919050565b610f5f81610f4c565b8114610f6a57600080fd5b50565b600081519050610f7c81610f56565b92915050565b600081519050610f9181610b9f565b92915050565b600080600080600060a08688031215610fb357610fb2610a37565b5b6000610fc188828901610f37565b9550506020610fd288828901610f6d565b9450506040610fe388828901610f82565b9350506060610ff488828901610f82565b925050608061100588828901610f37565b9150509295509295909350565b600061101d82610f4c565b915061102883610f4c565b925082820261103681610f4c565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561106e5761106d610d10565b5b828205841483151761108357611082610d10565b5b509291505056fea2646970667358221220d806fb7860a845b82e6a2d05501f15413ef0a718ce63713fbb65b07d8ee47c3264736f6c63430008120033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a9a565b6102f2565b6040516100cc9190610ae0565b60405180910390f35b3480156100e157600080fd5b506100ea61033b565b005b3480156100f857600080fd5b50610101610585565b60405161010e9190610ae0565b60405180910390f35b34801561012357600080fd5b5061012c610592565b6040516101399190610b0a565b60405180910390f35b34801561014e57600080fd5b506101576105ba565b6040516101649190610b84565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105e3565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bcb565b61087b565b6040516101c29190610b0a565b60405180910390f35b6802b5e3af16b188000061020860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c390919063ffffffff16565b1015610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610c55565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610cc1565b60405180910390fd5b60005b600180549050811015610475576000600182815481106103ef576103ee610ce1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046d90610d3f565b9150506103cc565b50600067ffffffffffffffff81111561049157610490610d87565b5b6040519080825280602002602001820160405280156104bf5781602001602082028036833780820191505090505b50600190805190602001906104d5929190610990565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104fc90610de7565b60006040518083038185875af1925050503d8060008114610539576040519150601f19603f3d011682016040523d82523d6000602084013e61053e565b606091505b5050905080610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610e48565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890610cc1565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ab575b5050505050905060005b815181101561087757600082828151811061071d5761071c610ce1565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff81111561078757610786610d87565b5b6040519080825280602002602001820160405280156107b55781602001602082028036833780820191505090505b50600190805190602001906107cb929190610990565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081290610de7565b60006040518083038185875af1925050503d806000811461084f576040519150601f19603f3d011682016040523d82523d6000602084013e610854565b606091505b505090508061086257600080fd5b5050808061086f90610d3f565b9150506106ff565b5050565b60006001828154811061089157610890610ce1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108cf836108ff565b90506000670de0b6b3a764000085836108e89190610e68565b6108f29190610ed9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190610f97565b5050509150506402540be400816109889190611012565b915050919050565b828054828255906000526020600020908101928215610a09579160200282015b82811115610a085782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b0565b5b509050610a169190610a1a565b5090565b5b80821115610a33576000816000905550600101610a1b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6782610a3c565b9050919050565b610a7781610a5c565b8114610a8257600080fd5b50565b600081359050610a9481610a6e565b92915050565b600060208284031215610ab057610aaf610a37565b5b6000610abe84828501610a85565b91505092915050565b6000819050919050565b610ada81610ac7565b82525050565b6000602082019050610af56000830184610ad1565b92915050565b610b0481610a5c565b82525050565b6000602082019050610b1f6000830184610afb565b92915050565b6000819050919050565b6000610b4a610b45610b4084610a3c565b610b25565b610a3c565b9050919050565b6000610b5c82610b2f565b9050919050565b6000610b6e82610b51565b9050919050565b610b7e81610b63565b82525050565b6000602082019050610b996000830184610b75565b92915050565b610ba881610ac7565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b600060208284031215610be157610be0610a37565b5b6000610bef84828501610bb6565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c3f601283610bf8565b9150610c4a82610c09565b602082019050919050565b60006020820190508181036000830152610c6e81610c32565b9050919050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b6000610cab601483610bf8565b9150610cb682610c75565b602082019050919050565b60006020820190508181036000830152610cda81610c9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4a82610ac7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d7c57610d7b610d10565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd1600083610db6565b9150610ddc82610dc1565b600082019050919050565b6000610df282610dc4565b9150819050919050565b7f53656e64204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e32600b83610bf8565b9150610e3d82610dfc565b602082019050919050565b60006020820190508181036000830152610e6181610e25565b9050919050565b6000610e7382610ac7565b9150610e7e83610ac7565b9250828202610e8c81610ac7565b91508282048414831517610ea357610ea2610d10565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ee482610ac7565b9150610eef83610ac7565b925082610eff57610efe610eaa565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f2981610f0a565b8114610f3457600080fd5b50565b600081519050610f4681610f20565b92915050565b6000819050919050565b610f5f81610f4c565b8114610f6a57600080fd5b50565b600081519050610f7c81610f56565b92915050565b600081519050610f9181610b9f565b92915050565b600080600080600060a08688031215610fb357610fb2610a37565b5b6000610fc188828901610f37565b9550506020610fd288828901610f6d565b9450506040610fe388828901610f82565b9350506060610ff488828901610f82565b925050608061100588828901610f37565b9150509295509295909350565b600061101d82610f4c565b915061102883610f4c565b925082820261103681610f4c565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561106e5761106d610d10565b5b828205841483151761108357611082610d10565b5b509291505056fea2646970667358221220d806fb7860a845b82e6a2d05501f15413ef0a718ce63713fbb65b07d8ee47c3264736f6c63430008120033",
    "devdoc": {
        "author": "Harsh Fichadiya",
        "details": "this implements pricefeed as out library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "this contract is a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 64,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(AggregatorV3Interface)45"
            },
            {
                "astId": 110,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 114,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_uint256)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
