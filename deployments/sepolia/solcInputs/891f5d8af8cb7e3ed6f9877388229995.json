{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "/*\n1. Get Funds from users.\n2. withdraw funds.\n3. set a minimum funding value in USD.\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConvertor.sol\";\n\ncontract FundMe {\n    using PriceConvertor for uint256;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    function fund() public payable {\n        // want to able to set a minimum fund amount in USD\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough\"\n        ); // 1e18 == 1*10**18 == 1000000000000000000\n        // 18 decimal\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the funders\n        funders = new address[](0);\n\n        // // withdraw fund has three ways\n        // // 1. transfer\n        // // msg.sender = address\n        // // payable(msg.sender) = payable address\n        // payable(msg.sender).transfer(address(this).balance);\n        // // 2. send\n        // bool transferSucess =  payable(msg.sender).send(address(this).balance);\n        // require(transferSucess,\"Send Failed\");\n\n        // 3. call\n        (bool callSucess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSucess, \"Send Failed\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"Sender is not owner!\");\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
        },
        "contracts/PriceConvertor.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n     function getPrice(AggregatorV3Interface priceFeed) internal  view returns(uint256) {\n        // we need ABI and address (0x694AA1769357215DE4FAC081bf1f309aDC325306)\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // price =  ETH price in terms of USD\n        // 3000.00000000 (8 decimals)\n\n        return uint256(price * 1e10); // 1e10 = 1**10 = 10000000000\n    }\n\n    function getVersion() internal view returns(uint256) {\n          AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\n        );\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // 3000_000000000000000000 = ETH / USD price\n        uint256 ethAmountInUsd = (ethPrice * ethAmount)/1e18;\n        return ethAmountInUsd;\n    }\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
